{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","components/lib/Skeleton/Skeleton.js","components/lib/Card/components/CardClassic/CardClassic.js","components/lib/Card/components/CardImage/CardImage.js","components/lib/Card/components/CardHorizontal/CardHorizontal.js","components/lib/Card/components/CardReveal/CardReveal.js","components/lib/Card/components/CardInfo/CardInfo.js","components/lib/Card/components/CardTeam/CardTeam.js","components/lib/Card/components/CardPolygon/CardPolygon.js","components/lib/Card/components/Percentage/Percentage.js","components/lib/Card/Card.js"],"names":["_arrayLikeToArray","arr","len","length","i","arr2","Array","_slicedToArray","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","err","o","minLen","n","prototype","toString","call","slice","constructor","name","from","test","TypeError","Skeleton","height","width","borderRadius","className","styleSkeleton","style","CardClassic","props","image","title","size","color","expanded","imageFitPosition","children","useState","initialSizeProps","styleSize","setStyleSize","isExpanded","setIsExpanded","isImgLoading","setIsImgLoading","styleColor","determinateColor","showTitle","src","alt","objectPosition","onLoad","onClick","e","preventDefault","whiteSpace","maxHeight","transition","CardImage","CardHorizontal","imageSide","reveal","kromacContainerStyle","setKromacContainerStyle","isClassExpanded","backgroundCaption","background","titleSize","maxWidth","boxShadow","transform","CardReveal","CardInfo","shape","borderstyle","borderStyle","bg","bgStyleByProps","determinateIcon","red","CardTeam","profession","redes","border","bgColor","map","index","href","url","CardPolygon","Percentage","progress","cardColor","progressColor","percentageStyles","strokeDashoffset","stroke","cx","cy","r","Card","cardType"],"mappings":"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","file":"static/js/37.fb807ffc.chunk.js","sourcesContent":["export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport exact from \"prop-types-exact\";\r\n\r\nconst Skeleton = ({\r\n  height = \"32px\",\r\n  width = \"100%\",\r\n  borderRadius = \"none\",\r\n  className = \"light\"\r\n}) => {\r\n  const styleSkeleton = {\r\n    height,\r\n    width,\r\n    borderRadius\r\n  };\r\n  return (\r\n    <div className={`kromac-skeleton ${className}`} style={styleSkeleton}>\r\n      <div className={`kromac-skeletonLoader ${className}`} />\r\n    </div>\r\n  );\r\n};\r\n\r\nSkeleton.propTypes = exact({\r\n  height: PropTypes.string,\r\n  width: PropTypes.string,\r\n  borderRadius: PropTypes.string,\r\n  className: PropTypes.oneOf([\"light\", \"dark\"])\r\n});\r\n\r\nexport default Skeleton;\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport exact from \"prop-types-exact\";\r\nimport { determinateColor, initialSizeProps } from \"../../../../../utils/utils\";\r\nimport Skeleton from \"../../../Skeleton\";\r\n\r\nconst CardClassic = props => {\r\n  const {\r\n    image,\r\n    title = \"\",\r\n    size = \"md\",\r\n    color = \"#fff\",\r\n    expanded = false,\r\n    imageFitPosition = \"center\",\r\n    children,\r\n    className = \"classic\"\r\n  } = props;\r\n\r\n  const [styleSize, setStyleSize] = useState(initialSizeProps);\r\n  const [isExpanded, setIsExpanded] = useState(false);\r\n  const [isImgLoading, setIsImgLoading] = useState(true);\r\n  const styleColor = determinateColor(color);\r\n  const showTitle = title || expanded;\r\n\r\n  const handleShowMore = e => {\r\n    e.preventDefault();\r\n    setStyleSize(() => {\r\n      if (isExpanded) {\r\n        return initialSizeProps;\r\n      } else {\r\n        return {\r\n          whiteSpace: \"initial\",\r\n          maxHeight: \"500px\",\r\n          transition: \"max-height 2s ease-out\"\r\n        };\r\n      }\r\n    });\r\n    setIsExpanded(!isExpanded);\r\n  };\r\n\r\n  return (\r\n    <div className={`kromac-container ${className}`}>\r\n      <div className=\"kromac-card\">\r\n        <div className=\"kromac-card-image\">\r\n          {isImgLoading && <Skeleton width=\"100%\" height=\"100%\" />}\r\n          <img\r\n            src={image}\r\n            alt=\"Card\"\r\n            style={{ objectPosition: imageFitPosition }}\r\n            onLoad={() => setIsImgLoading(false)}\r\n          />\r\n          {showTitle &&\r\n            <div className=\"card-title\">\r\n              <h4 className=\"animate__animated animate__zoomIn\">\r\n                {title}\r\n              </h4>\r\n              {expanded &&\r\n                <label onClick={handleShowMore}>\r\n                  {isExpanded ? \"show less\" : \"show more\"}\r\n                </label>}\r\n            </div>}\r\n        </div>\r\n        <div className={`kromac-card-caption ${styleColor}`}>\r\n          <div\r\n            className={`card-text ${size} animate__animated animate__zoomIn`}\r\n            style={{ ...styleSize }}\r\n          >\r\n            {children}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nCardClassic.propTypes = exact({\r\n  cardType: PropTypes.string,\r\n  image: PropTypes.string.isRequired,\r\n  title: PropTypes.string,\r\n  size: PropTypes.oneOf([\"sm\", \"md\", \"lg\"]),\r\n  color: PropTypes.oneOf([\"#fff\", \"transparent\"]),\r\n  expanded: PropTypes.bool,\r\n  imageFitPosition: PropTypes.string,\r\n  className: PropTypes.string,\r\n  children: PropTypes.any\r\n});\r\n\r\nexport default CardClassic;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport exact from \"prop-types-exact\";\r\nimport CardClassic from \"../CardClassic\";\r\n\r\nconst CardImage = props => <CardClassic {...props} className=\"card-img\" />;\r\n\r\nCardImage.propTypes = exact({\r\n  cardType: PropTypes.string,\r\n  image: PropTypes.string.isRequired,\r\n  title: PropTypes.string,\r\n  imageFitPosition: PropTypes.string,\r\n  children: PropTypes.any\r\n});\r\n\r\nexport default CardImage;\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport exact from \"prop-types-exact\";\r\nimport { determinateColor, initialSizeProps } from \"../../../../../utils/utils\";\r\nimport Skeleton from \"../../../Skeleton\";\r\n\r\nconst CardHorizontal = props => {\r\n  const {\r\n    image,\r\n    title = \"\",\r\n    color = \"#fff\",\r\n    imageSide = \"left\",\r\n    imageFitPosition = \"center\",\r\n    reveal = false,\r\n    children\r\n  } = props;\r\n\r\n  const [styleSize, setStyleSize] = useState(initialSizeProps);\r\n  const [isImgLoading, setIsImgLoading] = useState(true);\r\n  const [isExpanded, setIsExpanded] = useState(false);\r\n  const [kromacContainerStyle, setKromacContainerStyle] = useState(\r\n    initialSizeProps\r\n  );\r\n\r\n  const showTitle = title || reveal;\r\n  const styleColor = determinateColor(color);\r\n  const isClassExpanded = reveal ? \"expanded\" : \"\";\r\n  const backgroundCaption = { background: color };\r\n  const titleSize = reveal ? { maxWidth: \"65%\" } : { maxWidth: \"100%\" };\r\n\r\n  const handleShowMore = e => {\r\n    e.preventDefault();\r\n    setKromacContainerStyle(() => {\r\n      if (isExpanded) {\r\n        return initialSizeProps;\r\n      } else {\r\n        return {\r\n          boxShadow: \"0px 0px 15px 5px rgba(0, 0, 0, .5)\"\r\n        };\r\n      }\r\n    });\r\n    setStyleSize(() => {\r\n      if (isExpanded) {\r\n        return initialSizeProps;\r\n      } else {\r\n        if (imageSide === \"left\") {\r\n          return {\r\n            transform: \"translateX(0)\",\r\n            background: color\r\n          };\r\n        } else {\r\n          if (reveal) {\r\n            return {\r\n              transform: \"translateX(0%)\",\r\n              background: color\r\n            };\r\n          }\r\n          return {\r\n            transform: \"translateX(-50%)\",\r\n            background: color\r\n          };\r\n        }\r\n      }\r\n    });\r\n    setIsExpanded(!isExpanded);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={`kromac-container horizontal ${isClassExpanded}`}\r\n      style={kromacContainerStyle}\r\n    >\r\n      <div\r\n        className={`kromac-card horizontal ${imageSide} ${isClassExpanded} ${styleColor}`}\r\n      >\r\n        <div className={`kromac-card-image ${imageSide}`}>\r\n          {isImgLoading && <Skeleton width=\"100%\" height=\"100%\" />}\r\n          <img\r\n            src={image}\r\n            alt=\"Card\"\r\n            style={{ objectPosition: imageFitPosition }}\r\n            onLoad={() => setIsImgLoading(false)}\r\n          />\r\n          {showTitle &&\r\n            <div className=\"card-title\">\r\n              <h4\r\n                style={titleSize}\r\n                className=\"animate__animated animate__zoomIn\"\r\n              >\r\n                {title}\r\n              </h4>\r\n              {reveal &&\r\n                <label onClick={handleShowMore}>\r\n                  {isExpanded ? \"show less\" : \"show more\"}\r\n                </label>}\r\n            </div>}\r\n        </div>\r\n        <div\r\n          className={`kromac-card-caption ${imageSide} ${isClassExpanded} ${styleColor}`}\r\n          style={{ ...styleSize }}\r\n        >\r\n          <div\r\n            className=\"card-text kromac-scroll animate__animated animate__zoomIn\"\r\n            style={{ ...backgroundCaption }}\r\n          >\r\n            {children}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nCardHorizontal.propTypes = exact({\r\n  cardType: PropTypes.string,\r\n  image: PropTypes.string.isRequired,\r\n  title: PropTypes.string,\r\n  color: PropTypes.oneOf([\"#fff\", \"transparent\"]),\r\n  imageSide: PropTypes.string,\r\n  imageFitPosition: PropTypes.string,\r\n  reveal: PropTypes.bool,\r\n  children: PropTypes.any\r\n});\r\n\r\nexport default CardHorizontal;\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport exact from \"prop-types-exact\";\r\nimport { determinateColor } from \"../../../../../utils/utils\";\r\nimport Skeleton from \"../../../Skeleton\";\r\n\r\nconst CardReveal = props => {\r\n  const {\r\n    image,\r\n    title = \"\",\r\n    color = \"#fff\",\r\n    imageFitPosition = \"center\",\r\n    children\r\n  } = props;\r\n\r\n  const [isImgLoading, setIsImgLoading] = useState(true);\r\n  const styleColor = determinateColor(color);\r\n\r\n  return (\r\n    <div className={`kromac-container reveal`}>\r\n      <div className=\"kromac-card\">\r\n        <div className=\"kromac-card-image\">\r\n          {isImgLoading && <Skeleton width=\"80%\" height=\"100%\" />}\r\n          <img\r\n            src={image}\r\n            alt=\"Card\"\r\n            style={{ objectPosition: imageFitPosition }}\r\n            onLoad={() => setIsImgLoading(false)}\r\n          />\r\n        </div>\r\n        <div className={`kromac-card-caption ${styleColor}`}>\r\n          <div className=\"card-title\">\r\n            <h4>\r\n              {title}\r\n            </h4>\r\n          </div>\r\n          <div className={`card-text`}>\r\n            {children}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nCardReveal.propTypes = exact({\r\n  cardType: PropTypes.string,\r\n  image: PropTypes.string.isRequired,\r\n  title: PropTypes.string,\r\n  color: PropTypes.oneOf([\"#fff\", \"transparent\"]),\r\n  imageFitPosition: PropTypes.string,\r\n  children: PropTypes.any\r\n});\r\n\r\nexport default CardReveal;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport exact from \"prop-types-exact\";\r\nimport { bgStyleByProps, borderStyle } from \"../../../../../utils/utils\";\r\n\r\nconst CardInfo = props => {\r\n  const {\r\n    title = \"\",\r\n    size = \"auto\",\r\n    shape = \"color\",\r\n    color = \"transparent\",\r\n    children\r\n  } = props;\r\n\r\n  const borderstyle = borderStyle(color);\r\n  const bg = bgStyleByProps(color);\r\n\r\n  return (\r\n    <div className=\"kromac-container card-info\">\r\n      <div\r\n        className={`kromac-card ${color} ${shape}`}\r\n        style={{ ...borderstyle, ...bg }}\r\n      >\r\n        <span />\r\n        <div className=\"kromac-card-caption\">\r\n          <div className=\"card-title text-bg-light\">\r\n            <h4 className=\"animate__animated animate__zoomIn\">\r\n              {title}\r\n            </h4>\r\n          </div>\r\n          <div\r\n            className={`card-text ${size} text-bg-light animate__animated animate__zoomIn`}\r\n          >\r\n            {children}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nCardInfo.propTypes = exact({\r\n  cardType: PropTypes.string,\r\n  title: PropTypes.string.isRequired,\r\n  size: PropTypes.oneOf([\"sm\", \"md\", \"lg\", \"auto\"]),\r\n  shape: PropTypes.oneOf([\"color\", \"transparent\"]),\r\n  color: PropTypes.string,\r\n  children: PropTypes.any\r\n});\r\n\r\nexport default CardInfo;\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport exact from \"prop-types-exact\";\r\nimport { determinateColor } from \"../../../../../utils/utils\";\r\nimport Skeleton from \"../../../Skeleton\";\r\n\r\nconst fb =\r\n  \"https://res.cloudinary.com/dxg9gszax/image/upload/v1634079073/kromac-ui/facebook_eoffyk.svg\";\r\nconst ig =\r\n  \"https://res.cloudinary.com/dxg9gszax/image/upload/v1634079072/kromac-ui/instagram_xtonqo.svg\";\r\nconst li =\r\n  \"https://res.cloudinary.com/dxg9gszax/image/upload/v1634079072/kromac-ui/linkedin_nqwh1p.svg\";\r\nconst tw =\r\n  \"https://res.cloudinary.com/dxg9gszax/image/upload/v1634079073/kromac-ui/twitter_og7mxx.svg\";\r\nconst tc =\r\n  \"https://res.cloudinary.com/dxg9gszax/image/upload/v1634079072/kromac-ui/twitch_gczehv.svg\";\r\nconst yt =\r\n  \"https://res.cloudinary.com/dxg9gszax/image/upload/v1634079073/kromac-ui/youtube_mgcxep.svg\";\r\n\r\nconst determinateIcon = red => {\r\n  switch (red) {\r\n    case \"facebook\":\r\n      return (\r\n        <i>\r\n          <img src={fb} alt=\"fb\" />\r\n        </i>\r\n      );\r\n    case \"instagram\":\r\n      return (\r\n        <i>\r\n          <img src={ig} alt=\"ig\" />\r\n        </i>\r\n      );\r\n    case \"linkedin\":\r\n      return (\r\n        <i>\r\n          <img src={li} alt=\"li\" />\r\n        </i>\r\n      );\r\n    case \"twitter\":\r\n      return (\r\n        <i>\r\n          <img src={tw} alt=\"tw\" />\r\n        </i>\r\n      );\r\n    case \"twitch\":\r\n      return (\r\n        <i>\r\n          <img src={tc} alt=\"tc\" />\r\n        </i>\r\n      );\r\n    case \"youtube\":\r\n      return (\r\n        <i>\r\n          <img src={yt} alt=\"yt\" />\r\n        </i>\r\n      );\r\n    default:\r\n      return;\r\n  }\r\n};\r\n\r\nconst CardTeam = props => {\r\n  const {\r\n    image,\r\n    name = \"\",\r\n    profession = \"\",\r\n    shape = \"info\",\r\n    color = \"#fff\",\r\n    imageFitPosition = \"top\",\r\n    redes = [],\r\n    children\r\n  } = props;\r\n\r\n  const [isImgLoading, setIsImgLoading] = useState(true);\r\n  const styleColor = determinateColor(color);\r\n  const borderStyle =\r\n    color === \"transparent\" ? { border: \"solid 2px #fff\" } : {};\r\n  const bgColor =\r\n    color !== \"transparent\"\r\n      ? {\r\n        background: `linear-gradient(45deg, #000, ${color})`\r\n      }\r\n      : {};\r\n\r\n  return (\r\n    <div className={`kromac-container card-user`}>\r\n      <div\r\n        className={`kromac-card card-user-${shape} ${styleColor}`}\r\n        style={{ ...borderStyle, ...bgColor }}\r\n      >\r\n        <div className=\"kromac-card-image\">\r\n          {isImgLoading && <Skeleton width=\"100%\" height=\"100%\" />}\r\n          <img\r\n            src={image}\r\n            alt=\"Card\"\r\n            style={{ objectPosition: imageFitPosition }}\r\n            onLoad={() => setIsImgLoading(false)}\r\n          />\r\n        </div>\r\n        <div className={`kromac-card-caption`}>\r\n          <div className=\"card-title\">\r\n            <h4>\r\n              {name}\r\n            </h4>\r\n            <label>\r\n              {profession}\r\n            </label>\r\n            <ul>\r\n              {redes.map((red, index) =>\r\n                <li key={index}>\r\n                  <a href={red.url}>\r\n                    {determinateIcon(red.name)}\r\n                  </a>\r\n                </li>\r\n              )}\r\n            </ul>\r\n          </div>\r\n          <div className=\"card-text kromac-scroll\">\r\n            {children}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nCardTeam.propTypes = exact({\r\n  cardType: PropTypes.string,\r\n  image: PropTypes.string.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  profession: PropTypes.string,\r\n  shape: PropTypes.oneOf([\"info\", \"summary\"]),\r\n  color: PropTypes.string,\r\n  imageFitPosition: PropTypes.string,\r\n  redes: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      name: PropTypes.string.isRequired,\r\n      url: PropTypes.string.isRequired\r\n    })\r\n  ),\r\n  children: PropTypes.any\r\n});\r\n\r\nexport default CardTeam;\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport exact from \"prop-types-exact\";\r\nimport { determinateColor } from \"../../../../../utils/utils\";\r\nimport Skeleton from \"../../../Skeleton\";\r\n\r\nconst CardPolygon = props => {\r\n  const {\r\n    image,\r\n    name,\r\n    color = \"#fff\",\r\n    imageFitPosition = \"top\",\r\n    shape = \"hexagon\",\r\n    children\r\n  } = props;\r\n  const [isImgLoading, setIsImgLoading] = useState(true);\r\n  const styleColor = determinateColor(color);\r\n  const bgColor =\r\n    color !== \"transparent\"\r\n      ? {\r\n          background: `linear-gradient(45deg, ${color}, #0000004D)`\r\n        }\r\n      : {};\r\n\r\n  return (\r\n    <div className=\"kromac-container card-hexagon\">\r\n      <div\r\n        className={`kromac-card ${shape} ${styleColor}`}\r\n        style={{ ...bgColor }}\r\n      >\r\n        <div className=\"kromac-card-image\">\r\n          {isImgLoading && <Skeleton width=\"100%\" height=\"100%\" />}\r\n          <img\r\n            src={image}\r\n            alt=\"Card\"\r\n            style={{ objectPosition: imageFitPosition }}\r\n            onLoad={() => setIsImgLoading(false)}\r\n          />\r\n        </div>\r\n        <div className=\"kromac-card-caption\" style={bgColor}>\r\n          <div className=\"text-bg-light\">\r\n            <h4>\r\n              {name}\r\n            </h4>\r\n            {children}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nCardPolygon.propTypes = exact({\r\n  cardType: PropTypes.string,\r\n  image: PropTypes.string.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  shape: PropTypes.oneOf([\r\n    \"hexagon\",\r\n    \"rhombus\",\r\n    \"pentagon\",\r\n    \"heptagon\",\r\n    \"octagon\",\r\n    \"bevel\",\r\n    \"circle\"\r\n  ]),\r\n  color: PropTypes.string,\r\n  imageFitPosition: PropTypes.string,\r\n  children: PropTypes.any\r\n});\r\n\r\nexport default CardPolygon;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport exact from \"prop-types-exact\";\r\nimport { bgStyleByProps, borderStyle } from \"../../../../../utils/utils\";\r\n\r\nconst Percentage = props => {\r\n  const {\r\n    title = \"\",\r\n    progress = 0,\r\n    cardColor = \"transparent\",\r\n    progressColor = \"#D53DC4\"\r\n  } = props;\r\n\r\n  const borderstyle = borderStyle(cardColor);\r\n  const bgColor = bgStyleByProps(cardColor);\r\n  const percentageStyles = {\r\n    strokeDashoffset: `calc(440 - (440 * ${progress}) / 100)`,\r\n    stroke: progressColor\r\n  };\r\n\r\n  return (\r\n    <div className={`kromac-container card-percentage`}>\r\n      <div\r\n        className={`kromac-card ${cardColor}`}\r\n        style={{ ...borderstyle, ...bgColor }}\r\n      >\r\n        <div className={`kromac-card-caption`}>\r\n          <div className=\"kromac-card-content\">\r\n            <div className=\"percent\">\r\n              <svg>\r\n                <circle cx=\"70\" cy=\"70\" r=\"70\" />\r\n                <circle cx=\"70\" cy=\"70\" r=\"70\" style={percentageStyles} />\r\n              </svg>\r\n            </div>\r\n            <h2 className=\"text-bg-light animate__animated animate__zoomIn\">\r\n              {progress}%\r\n            </h2>\r\n            <div className=\"card-title text-bg-light animate__animated animate__zoomIn\">\r\n              <h6>\r\n                {title}\r\n              </h6>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nPercentage.propTypes = exact({\r\n  cardType: PropTypes.string,\r\n  title: PropTypes.string.isRequired,\r\n  progress: PropTypes.number.isRequired,\r\n  cardColor: PropTypes.string,\r\n  progressColor: PropTypes.string,\r\n  children: PropTypes.any\r\n});\r\n\r\nexport default Percentage;\r\n","import React from \"react\";\r\n\r\nimport CardImage from \"./components/CardImage\";\r\nimport CardHorizontal from \"./components/CardHorizontal\";\r\nimport CardReveal from \"./components/CardReveal\";\r\nimport CardInfo from \"./components/CardInfo\";\r\nimport CardClassic from \"./components/CardClassic\";\r\nimport CardTeam from \"./components/CardTeam\";\r\nimport CardPolygon from \"./components/CardPolygon\";\r\nimport Percentage from \"./components/Percentage\";\r\n\r\nconst Card = props => {\r\n  const { cardType } = props;\r\n  switch (cardType) {\r\n    case \"image\":\r\n      return <CardImage {...props} />;\r\n    case \"horizontal\":\r\n      return <CardHorizontal {...props} />;\r\n    case \"reveal\":\r\n      return <CardReveal {...props} />;\r\n    case \"info\":\r\n      return <CardInfo {...props} />;\r\n    case \"team\":\r\n      return <CardTeam {...props} />;\r\n    case \"polygon\":\r\n      return <CardPolygon {...props} />;\r\n    case \"percentage\":\r\n      return <Percentage {...props} />;\r\n    default:\r\n      return <CardClassic {...props} />;\r\n  }\r\n};\r\n\r\nexport default Card;\r\n"],"sourceRoot":""}